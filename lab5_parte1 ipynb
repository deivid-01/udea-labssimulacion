{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.9"
    },
    "colab": {
      "name": "lab5_parte1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XrfDiFHOUHIf"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jdariasl/ML_2020/blob/master/Labs/lab5/lab5_parte1.ipynb\">\n",
        "    <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n",
        "\n",
        "**Recuerda que una vez abierto, Da clic en \"Copiar en Drive\", de lo contrario no podras almacenar tu progreso**\n",
        "\n",
        "Nota: no olvide ir ejecutando las celdas de código de arriba hacia abajo para que no tenga errores de importación de librerías o por falta de definición de variables."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L6q8_ixzUHIg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "250e4fd3-fb87-4222-c092-42bee94b3d58"
      },
      "source": [
        "#configuración del laboratorio\n",
        "# Ejecuta esta celda!\n",
        "%load_ext autoreload\n",
        "%autoreload 2\n",
        "#for local \n",
        "#import sys ; sys.path.append('../commons/utils/')\n",
        "!wget https://raw.githubusercontent.com/jdariasl/ML_2020/master/Labs/commons/utils/general.py -O general.py --no-cache\n",
        "from general import configure_lab5_1\n",
        "configure_lab5_1()\n",
        "from lab5 import *\n",
        "GRADER, dataset = part_1()\n",
        "import neurolab as nl"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-11-20 03:15:47--  https://raw.githubusercontent.com/jdariasl/ML_2020/master/Labs/commons/utils/general.py\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 14117 (14K) [text/plain]\n",
            "Saving to: ‘general.py’\n",
            "\n",
            "\rgeneral.py            0%[                    ]       0  --.-KB/s               \rgeneral.py          100%[===================>]  13.79K  --.-KB/s    in 0s      \n",
            "\n",
            "2020-11-20 03:15:47 (32.6 MB/s) - ‘general.py’ saved [14117/14117]\n",
            "\n",
            "lab configuration started\n",
            "installing libraries\n",
            "downloading files\n",
            "lab configured\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bpINIvigUHIj"
      },
      "source": [
        "# Laboratorio 5 - Parte 1: Redes recurrentes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "juJzpTmIUHIj"
      },
      "source": [
        "En este  laboratorio entrenaremos una Red Neuronal Recurrente para la predicción de una serie de tiempo. \n",
        "\n",
        "Este problema corresponde a una configuración many-to-one. \n",
        "\n",
        "En este caso usaremos una serie de tiempo que corresponde al número de pasajeros internacionales por mes, desde el año 1949 hasta el año 1960. \n",
        "\n",
        "En la siguiente celda visualizamos los datos."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3q8fueYYUHIk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "outputId": "65badc48-db90-43c7-9538-7c254b214c1f"
      },
      "source": [
        "# creamos una variable para\n",
        "# el tiempo\n",
        "Time = pd.date_range(np.datetime64('1949-01'), np.datetime64('1961-01'), freq='M')\n",
        "print(\"tenemos dispnible nuestra base de datos en el pandas DF 'dataset' \\n\")\n",
        "plt.plot(Time,dataset)\n",
        "plt.title('International airline passengers')\n",
        "plt.xlabel('Time (months)')\n",
        "plt.show()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tenemos dispnible nuestra base de datos en el pandas DF 'dataset' \n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N0u19e8LUHIn"
      },
      "source": [
        "En nuestro primer ejercicio vamos a explorar, que relación existe entre una muestra con las muestras inmediantamente pasadas.La libreria statsmodel [tiene una función que nos sirve para analizar esta relación](https://www.statsmodels.org/stable/generated/statsmodels.graphics.tsaplots.plot_acf.html).\n",
        "\n",
        "\n",
        "## Ejercicio 1 - Exploración del problema\n",
        "\n",
        "Este plot realiza una operación cuyos detalles son explicados en mayor profundidad en [esta buena entrada de blog](https://machinelearningmastery.com/gentle-introduction-autocorrelation-partial-autocorrelation/). Pero nuestro laboratorio lo que no interesa es entender:\n",
        "\n",
        "1. El valor varia entre 1.0 y -1.0. \n",
        "2. Cuando el valor de la correlación es 1.0, corresponde el valor maximo indicando una relación positiva entre la variable y su correspondiente lag o retraso.\n",
        "3. Cuando el valor de la correlación es -1.0, corresponde el valor mínimo indicando una relación negativa entre la variable y su correspondiente lag o retraso..\n",
        "4. 0.0 indica que los valores no están relacionados.\n",
        "5. el lag indica, el número de retrasos. Si el valor de la correlación en el lag  5 es igual 0.75, indica una relación positiva alta entre el quinto retraso anterior en la mayoria de muestras de nuestra variable de respuesta.\n",
        "\n",
        "Ahora, grafiquemos la correlación para un maximo de 45 lags de nuestros datos"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zFanVFDdUHIn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "outputId": "201c5f70-6348-4987-9f55-a508d443a695"
      },
      "source": [
        "from statsmodels.graphics import tsaplots\n",
        "fig, ax = plt.subplots(figsize = (12,7))\n",
        "# Display the autocorrelation plot of your time series\n",
        "fig = tsaplots.plot_acf(dataset.passengers, lags=45, ax = ax)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1CWoMbcjUHIp"
      },
      "source": [
        "reforzando el entendimiento de lo anterior,en la grafica podemos ver lo siguiente:\n",
        "1. cuando hay un lag = 5 (es decir evaluar que tan relacionadas estas las 5 muestras anteriores), tenemos una autocorrelación $\\approx$ 0.75 \n",
        "2. cuando hay un lag = 25 (es decir evaluar que tan relacionadas estas las 25 muestras anteriores), tenemos una autocorrelación $\\approx$ 0.5\n",
        "\n",
        "Ten en cuenta este analisis para responder la siguiente pregunta abierta"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qLp01IcGUHIq",
        "cellView": "form"
      },
      "source": [
        "#@title Pregunta Abierta\n",
        "#@markdown ¿Por qué es mas factible construir un modelo RNN con un retardo de 5 vs un retardo de 25? . Justifica con base a las anteriores explicaciones\n",
        "respuesta_1 = \"Dado que generalmente la correlacion entre cada retardo no es constante, sino que varia a lo largo del tiempo y esta variacion se de forma paulatina, asi que es mas factible escoger un retardo de 5, ya que va  haber mayor probabilidad de que el valor de correlacion no haya cambiado mucho comparado con uno de 25\" #@param {type:\"string\"}"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N09BmOZOUHIr"
      },
      "source": [
        "Para aplicar la red recurrente, debemos transformar nuestros datos. La idea es alimentar los retrasos como caracteristicas a nuestro modelo. Para ello se propone esta función."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zfk-zyGdUHIs"
      },
      "source": [
        "# convert an array of values into a dataset matrix\n",
        "def create_dataset(dataset, look_back=1):\n",
        "    \"\"\"funcion que crea dataset apto para RNN\n",
        "    \n",
        "    dataset: pandas dataframe con una sola columna\n",
        "    look_back: numero de retrasos con los cuales queremos construir\n",
        "        las caracteristicas\n",
        "    \"\"\"\n",
        "    dataX, dataY = [], []\n",
        "    for i in range(len(dataset)-look_back-1):\n",
        "        a = dataset[i:(i+look_back), 0]\n",
        "        dataX.append(a)\n",
        "        dataY.append(dataset[i + look_back, 0])\n",
        "    return np.array(dataX), np.array(dataY).reshape(len(dataY), 1)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B7mgNk-WUHIu"
      },
      "source": [
        "## Ejercicio 2 - Experimentar con RNN\n",
        "\n",
        "Vamos usar una libreria llamada neurolab. La documentación puede ser consultada en : https://pythonhosted.org/neurolab/. (podemos hacer uso como `nl...`)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pbk27o_vUHIu"
      },
      "source": [
        "En el siguiente ejercicio vamnos a completar el código para entrenar una red neuronal recurrente de Elman con las siguientes caracteristicas:\n",
        "1. las capas ocultas deben ser variables de acuerdo al parametro. Sin embargo solo siempre tenemos una sola capa de salida.\n",
        "2. función de activación tangente hiperbólica paras las capas ocultas y lineal para la capa de salida. \n",
        "3. número de épocas igual a 1000.\n",
        "4. Definir objetivo de error inferior a 0.001. \n",
        "5. Inicializar los pesos de las capas aleatoriamente entre [-0.1, 0.1].\n",
        "6. Vamos utilizar como medida de error el error absoluto medio.  [recordar usar la implementación del modulo de metricas de sklearn](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics)\n",
        "\n",
        "Notas Adicionales:\n",
        "1. tener en cuenta que hace el parametro feature_range de la función [MinMaxScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html)\n",
        "2. Entender como se sugiere usar la codigo que vamos encontrar dentro la función:\n",
        "```python\n",
        "layers = []\n",
        "    for i in range(look_back):\n",
        "        layers.append([0, 1])\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qR2X2aHeUHIu"
      },
      "source": [
        "#ejercicio de código\n",
        "def experimentar_elman(data, look_backs, hidden_neurons):\n",
        "    \"\"\"funcion que realiza experimentos para evaluar una RNN de elman usando\n",
        "        el error absoluto medio como medida de error\n",
        "    \n",
        "    data: pd.Dataframe, dataset a usar\n",
        "    look_back: List[int], lista con los numero de retrasos a evaluar\n",
        "    hidden_neurons: List[int], list con el numero de neuronas en la capa oculta\n",
        "    retorna: pd.Dataframe con las siguientes columnas:\n",
        "        - lags\n",
        "        - neuronas por capas\n",
        "        - error de entrenamiento\n",
        "        - error de prueba\n",
        "    \"\"\"\n",
        "    # we need to normalize the dataset before\n",
        "    #\n",
        "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "    dataset = scaler.fit_transform(data)\n",
        "    # split into train and test sets\n",
        "    train_size = int(len(dataset) * 0.7)\n",
        "    test_size = len(dataset) - train_size\n",
        "    train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\n",
        "    resultados = pd.DataFrame()\n",
        "    idx = 0\n",
        "    for num_hidden_neurons in hidden_neurons:\n",
        "        for look_back in look_backs:\n",
        "            # reshape into X=t-look_back+1:t and Y=t+1\n",
        "            trainX, trainY = create_dataset(train, look_back)\n",
        "            testX, testY = create_dataset(test, look_back)          \n",
        "            #Esta variable se requiere para definir la red de acuerdo con la librería neurolab. \n",
        "            #Define el número de entradas y el rango de valores que toma cada entrada\n",
        "            layers = []\n",
        "            for i in range(look_back):\n",
        "                layers.append([0, 1])\n",
        "            # Crear la red usa una instruccion como nl.{...}.{...}\n",
        "            net = nl.net.newelm( layers,[num_hidden_neurons,1], [nl.trans.TanSig(), nl.trans.PureLin()])\n",
        "            #definir funciones para inicializar los pesos e inicializar la red\n",
        "            # Set initialized functions and init\n",
        "            net.layers[0].initf = nl.init.InitRand([-0.1, 0.1], 'w')\n",
        "            net.layers[1].initf= nl.init.InitRand([-0.1, 0.1], 'w')\n",
        "            net.init()\n",
        "            # Entrenar la red con los datos de entrenamiento\n",
        "            # la instrucción del tiempo es para evaluar el tiempo\n",
        "            # de entrenamiento, llame explícitamente los parametros\n",
        "            # para las epocas y el objetivo\n",
        "            # show = 500 # (esta instruccion ayuda a que no se presenten muchos prints intermedios)\n",
        "            net.train(trainX,trainY,epochs=1000, show=500, goal=0.001)\n",
        "            # Evaluar la red con los datos de en entrenamiento y test\n",
        "            trainYPred = net.sim(trainX)\n",
        "            testYPred = net.sim(testX)\n",
        "            # Calculo de error\n",
        "            errorPrueba = mean_absolute_error(testY,testYPred)\n",
        "            errorEntrenamiento = mean_absolute_error(trainY, trainYPred)\n",
        "            resultados.loc[idx,'lags'] = look_back\n",
        "            resultados.loc[idx,'neuronas por capa'] = num_hidden_neurons\n",
        "            resultados.loc[idx,'error de entrenamiento'] = errorEntrenamiento\n",
        "            resultados.loc[idx,'error de prueba'] = errorPrueba\n",
        "            idx+=1\n",
        "    \n",
        "    return (resultados)"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GNWlBCBhQWNi"
      },
      "source": [
        ""
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ffJwb8WXUHIw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4efcd515-7560-45ef-cd52-9e68fe1344d6"
      },
      "source": [
        "#\n",
        "GRADER.run_test(\"ejercicio1\", experimentar_elman)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 500; Error: 0.061405491482501164;\n",
            "Epoch: 1000; Error: 0.06285819323872047;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.063246181145608;\n",
            "Epoch: 1000; Error: 0.06324623786660663;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.06140457786629572;\n",
            "Epoch: 1000; Error: 0.0648334157276388;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.06324620957596791;\n",
            "Epoch: 1000; Error: 0.06719199656084511;\n",
            "The maximum number of train epochs is reached\n",
            "TEST EXITOSO!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p72IA8WCUHIy"
      },
      "source": [
        "Ahora vamos a ver los resultados del experimentos, variando los lags y las neuronas por capa"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sOaV_Hn7UHIz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a686a948-b798-4c30-e4d9-8cb09bf41f1b"
      },
      "source": [
        "resultadosElman = experimentar_elman(dataset, look_backs = [1,3,5,10,30,40], hidden_neurons=[10,20,30])"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 500; Error: 0.01966988953199409;\n",
            "Epoch: 1000; Error: 0.021251413967500573;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.002622075246755581;\n",
            "Epoch: 1000; Error: 0.002079187774923365;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.019068011956791787;\n",
            "Epoch: 1000; Error: 0.019145344697706995;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.01852192706913856;\n",
            "Epoch: 1000; Error: 0.018523949219079197;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.013831783180013291;\n",
            "Epoch: 1000; Error: 0.014123445813445656;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.01212095346878179;\n",
            "Epoch: 1000; Error: 0.012132964049858547;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.015193998323137557;\n",
            "Epoch: 1000; Error: 0.010697706937245845;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.019388693404372482;\n",
            "Epoch: 1000; Error: 0.01939272552461736;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.019067775180860398;\n",
            "Epoch: 1000; Error: 0.019070510672878623;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.018521927037146335;\n",
            "Epoch: 1000; Error: 0.018537075868625196;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.01434642500746568;\n",
            "Epoch: 1000; Error: 0.014198353804521146;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.012104426238162814;\n",
            "Epoch: 1000; Error: 0.012166939779666671;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.019669889350659518;\n",
            "Epoch: 1000; Error: 0.01966988972901371;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.019390159579514007;\n",
            "Epoch: 1000; Error: 0.019531002386583726;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.019257753264948368;\n",
            "Epoch: 1000; Error: 0.019232782976420577;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.01852194307740315;\n",
            "Epoch: 1000; Error: 0.01854299421532951;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.0033118808665655386;\n",
            "Epoch: 1000; Error: 0.0012824207604425555;\n",
            "The maximum number of train epochs is reached\n",
            "Epoch: 500; Error: 0.0058624586719128475;\n",
            "The goal of learning is reached\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j1mtTSqmUHI0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 416
        },
        "outputId": "cdbe86bc-cfed-4e40-fe56-4c465cbd2c0c"
      },
      "source": [
        "# para ver los resultados\n",
        "# en esta instruccion se va resaltar el mejor\n",
        "# error y tiempo de entrenamiento\n",
        "resultadosElman.style.highlight_min(color = 'lightgreen', axis = 0, subset = ['error de prueba'])"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style  type=\"text/css\" >\n",
              "#T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row17_col3{\n",
              "            background-color:  lightgreen;\n",
              "        }</style><table id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >lags</th>        <th class=\"col_heading level0 col1\" >neuronas por capa</th>        <th class=\"col_heading level0 col2\" >error de entrenamiento</th>        <th class=\"col_heading level0 col3\" >error de prueba</th>    </tr></thead><tbody>\n",
              "                <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row0_col1\" class=\"data row0 col1\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row0_col2\" class=\"data row0 col2\" >0.122904</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row0_col3\" class=\"data row0 col3\" >0.354553</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row1_col0\" class=\"data row1 col0\" >3.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row1_col1\" class=\"data row1 col1\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row1_col2\" class=\"data row1 col2\" >0.037092</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row1_col3\" class=\"data row1 col3\" >0.078274</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row2_col0\" class=\"data row2 col0\" >5.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row2_col1\" class=\"data row2 col1\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row2_col2\" class=\"data row2 col2\" >0.114774</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row2_col3\" class=\"data row2 col3\" >0.374397</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row3_col0\" class=\"data row3 col0\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row3_col1\" class=\"data row3 col1\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row3_col2\" class=\"data row3 col2\" >0.111526</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row3_col3\" class=\"data row3 col3\" >0.399293</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row4_col0\" class=\"data row4 col0\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row4_col1\" class=\"data row4 col1\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row4_col2\" class=\"data row4 col2\" >0.095011</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row4_col3\" class=\"data row4 col3\" >0.431163</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row5_col0\" class=\"data row5 col0\" >40.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row5_col1\" class=\"data row5 col1\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row5_col2\" class=\"data row5 col2\" >0.089634</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row5_col3\" class=\"data row5 col3\" >0.371868</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row6_col0\" class=\"data row6 col0\" >1.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row6_col1\" class=\"data row6 col1\" >20.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row6_col2\" class=\"data row6 col2\" >0.077477</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row6_col3\" class=\"data row6 col3\" >0.245548</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row7_col0\" class=\"data row7 col0\" >3.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row7_col1\" class=\"data row7 col1\" >20.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row7_col2\" class=\"data row7 col2\" >0.115805</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row7_col3\" class=\"data row7 col3\" >0.386494</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row8_col0\" class=\"data row8 col0\" >5.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row8_col1\" class=\"data row8 col1\" >20.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row8_col2\" class=\"data row8 col2\" >0.114469</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row8_col3\" class=\"data row8 col3\" >0.381537</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row9_col0\" class=\"data row9 col0\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row9_col1\" class=\"data row9 col1\" >20.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row9_col2\" class=\"data row9 col2\" >0.111554</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row9_col3\" class=\"data row9 col3\" >0.396823</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row10_col0\" class=\"data row10 col0\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row10_col1\" class=\"data row10 col1\" >20.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row10_col2\" class=\"data row10 col2\" >0.099771</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row10_col3\" class=\"data row10 col3\" >0.394939</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row11_col0\" class=\"data row11 col0\" >40.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row11_col1\" class=\"data row11 col1\" >20.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row11_col2\" class=\"data row11 col2\" >0.090296</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row11_col3\" class=\"data row11 col3\" >0.358627</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row12_col0\" class=\"data row12 col0\" >1.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row12_col1\" class=\"data row12 col1\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row12_col2\" class=\"data row12 col2\" >0.116754</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row12_col3\" class=\"data row12 col3\" >0.394341</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row13_col0\" class=\"data row13 col0\" >3.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row13_col1\" class=\"data row13 col1\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row13_col2\" class=\"data row13 col2\" >0.116423</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row13_col3\" class=\"data row13 col3\" >0.376602</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row14_col0\" class=\"data row14 col0\" >5.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row14_col1\" class=\"data row14 col1\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row14_col2\" class=\"data row14 col2\" >0.115017</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row14_col3\" class=\"data row14 col3\" >0.370355</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row15_col0\" class=\"data row15 col0\" >10.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row15_col1\" class=\"data row15 col1\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row15_col2\" class=\"data row15 col2\" >0.111568</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row15_col3\" class=\"data row15 col3\" >0.405305</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row16_col0\" class=\"data row16 col0\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row16_col1\" class=\"data row16 col1\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row16_col2\" class=\"data row16 col2\" >0.029920</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row16_col3\" class=\"data row16 col3\" >0.051804</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row17_col0\" class=\"data row17 col0\" >40.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row17_col1\" class=\"data row17 col1\" >30.000000</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row17_col2\" class=\"data row17 col2\" >0.026041</td>\n",
              "                        <td id=\"T_fc5bdf0e_2ade_11eb_8a7e_0242ac1c0002row17_col3\" class=\"data row17 col3\" >0.029520</td>\n",
              "            </tr>\n",
              "    </tbody></table>"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f45ac9574a8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uqHNlGOBUHI2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 401
        },
        "outputId": "42a5142d-8c23-4be0-c67c-310d1b853162"
      },
      "source": [
        "# observa el comportamiento de los lags\n",
        "import seaborn as sns\n",
        "sns.relplot(data= resultadosElman, x= 'lags', y = 'error de prueba', kind = 'line')"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f45a776c4e0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tSw9j936UHI4",
        "cellView": "form"
      },
      "source": [
        "#@title Pregunta Abierta\n",
        "#@markdown ¿Por qué seguir aumentando los tiempos de retardo no implica siempre una mejora en la predicción del modelo?\n",
        "respuesta_2 = \"Porque la aplicacion consecutiva de multiples funciones de activacion, pueden terminar por desvanecer el resultado, por lo tanto el error de prueba volveria aumentar\" #@param {type:\"string\"}"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RUqSiyWGUHI7"
      },
      "source": [
        "## Ejercicio 3 - Comparación con MLP\n",
        "\n",
        "En este ejercicio vamos a realizar el mismo ejercicio, pero con un MLP. Con esto vamos a comparar los resultados obtenidos con la RNN.\n",
        "\n",
        "Para ellos vamos a :\n",
        "1. variar los retrasos, que corresponden a las neuronas en la capa de entrada\n",
        "2. vamos a dejar solo una capa oculta y vamos a variar el número de neuronas en esta capa\n",
        "3. el número de epocas también va ser de 1000\n",
        "4. el valor por defecto sera usado para el resto de parámetros\n",
        "5. utilizar como medida de error el error absoluto medio.  [recordar usar la implementación del modulo de metricas de sklearn](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CY9g8N0AUHI8",
        "cellView": "form"
      },
      "source": [
        "#@title Pregunta Abierta\n",
        "#@markdown ¿explique la principal diferencia entre un MLP y una red recurrente de elman? justificar usando usando como contexto el problema que estamos resolviendo.\n",
        "respuesta_3 = \"La principal diferencia es que una red recurrente de elman la salida de las capas ocultas se van a a conectar a la entrada de la misma capa oculta pero un tiempo posterior. En el caso del problema, en un mes poterior. En cambio en un MLP, no le importa que los datos sean secuenciales, se asume que cada muestra es independiente\" #@param {type:\"string\"}"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WR_c10DtUHI9"
      },
      "source": [
        "#ejercicio de código\n",
        "def experimentar_MLP(data, look_backs, hidden_neurons):\n",
        "    \"\"\"funcion que realiza experimentos para evaluar una MLPusando\n",
        "        MAPE como medida de error\n",
        "    \n",
        "    data: pd.Dataframe, dataset a usar\n",
        "    look_back: List[int], lista con los numero de retrasos a evaluar\n",
        "    hidden_neurons: List[int], list con el numero de neuronas en la capa oculta\n",
        "    retorna: pd.Dataframe con las siguientes columnas:\n",
        "        - lags\n",
        "        - neuronas por capas\n",
        "        - error de entrenamiento\n",
        "        - error de prueba\n",
        "    \"\"\"\n",
        "    # we need to normalize the dataset before\n",
        "    #\n",
        "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "    dataset = scaler.fit_transform(data)\n",
        "    # split into train and test sets\n",
        "    train_size = int(len(dataset) * 0.7)\n",
        "    test_size = len(dataset) - train_size\n",
        "    train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\n",
        "    resultados = pd.DataFrame()\n",
        "    idx = 0\n",
        "    for num_hidden_neurons in hidden_neurons:\n",
        "        for look_back in look_backs:\n",
        "            # reshape into X=t-look_back+1:t and Y=t+1\n",
        "            trainX, trainY = create_dataset(train, look_back)\n",
        "            testX, testY = create_dataset(test, look_back)          \n",
        "            # define el MLP para Regresion pasando los parametros adecuados\n",
        "            # pasar random_state = 10 para lograr resultados reproducibles\n",
        "            net =  MLPRegressor(hidden_layer_sizes= (num_hidden_neurons,1), max_iter = 1000, random_state = 10)\n",
        "            # Entrenar la red con los datos de entrenamiento\n",
        "            net.fit(X=trainX, y=trainY)\n",
        "            # Evaluar la red con los datos de entrenamiento y test\n",
        "            trainYPred = net.predict(trainX)\n",
        "            testYPred = net.predict(testX)\n",
        "            # Calculo de error\n",
        "            errorPrueba = mean_absolute_error(testY, testYPred)\n",
        "            errorEntrenamiento =mean_absolute_error(trainY, trainYPred)\n",
        "            resultados.loc[idx,'lags'] = look_back\n",
        "            resultados.loc[idx,'neuronas por capa'] = num_hidden_neurons\n",
        "            resultados.loc[idx,'error de entrenamiento'] = errorEntrenamiento\n",
        "            resultados.loc[idx,'error de prueba'] = errorPrueba\n",
        "            idx+=1\n",
        "    \n",
        "    return (resultados)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i20ocJGJUHI_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22d963c1-4109-492b-c1e1-c6957b1ab957"
      },
      "source": [
        "GRADER.run_test(\"ejercicio2\", experimentar_MLP)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "TEST EXITOSO!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Utx-2XSEUHJB"
      },
      "source": [
        "resultadosMLP = experimentar_MLP(dataset, look_backs = [1,3,5,10,30,40], hidden_neurons=[10,20,30])"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VIyuIhOMUHJC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 416
        },
        "outputId": "3461d050-27f4-4565-edc3-45dccef8a787"
      },
      "source": [
        "# para ver los resultados\n",
        "# en esta instruccion se va resaltar el mejor\n",
        "# error y tiempo de entrenamiento\n",
        "resultadosMLP.style.highlight_min(color = 'lightgreen', axis = 0, subset = ['error de prueba'])"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style  type=\"text/css\" >\n",
              "#T_0083e676_2adf_11eb_8a7e_0242ac1c0002row0_col3{\n",
              "            background-color:  lightgreen;\n",
              "        }</style><table id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >lags</th>        <th class=\"col_heading level0 col1\" >neuronas por capa</th>        <th class=\"col_heading level0 col2\" >error de entrenamiento</th>        <th class=\"col_heading level0 col3\" >error de prueba</th>    </tr></thead><tbody>\n",
              "                <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row0_col1\" class=\"data row0 col1\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row0_col2\" class=\"data row0 col2\" >0.407783</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row0_col3\" class=\"data row0 col3\" >0.123787</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row1_col0\" class=\"data row1 col0\" >3.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row1_col1\" class=\"data row1 col1\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row1_col2\" class=\"data row1 col2\" >0.129331</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row1_col3\" class=\"data row1 col3\" >0.513968</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row2_col0\" class=\"data row2 col0\" >5.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row2_col1\" class=\"data row2 col1\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row2_col2\" class=\"data row2 col2\" >0.214258</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row2_col3\" class=\"data row2 col3\" >0.597153</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row3_col0\" class=\"data row3 col0\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row3_col1\" class=\"data row3 col1\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row3_col2\" class=\"data row3 col2\" >0.751661</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row3_col3\" class=\"data row3 col3\" >1.152376</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row4_col0\" class=\"data row4 col0\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row4_col1\" class=\"data row4 col1\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row4_col2\" class=\"data row4 col2\" >0.698707</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row4_col3\" class=\"data row4 col3\" >1.112792</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row5_col0\" class=\"data row5 col0\" >40.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row5_col1\" class=\"data row5 col1\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row5_col2\" class=\"data row5 col2\" >0.607945</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row5_col3\" class=\"data row5 col3\" >0.974479</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row6_col0\" class=\"data row6 col0\" >1.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row6_col1\" class=\"data row6 col1\" >20.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row6_col2\" class=\"data row6 col2\" >0.074414</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row6_col3\" class=\"data row6 col3\" >0.316314</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row7_col0\" class=\"data row7 col0\" >3.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row7_col1\" class=\"data row7 col1\" >20.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row7_col2\" class=\"data row7 col2\" >0.055649</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row7_col3\" class=\"data row7 col3\" >0.138220</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row8_col0\" class=\"data row8 col0\" >5.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row8_col1\" class=\"data row8 col1\" >20.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row8_col2\" class=\"data row8 col2\" >0.114254</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row8_col3\" class=\"data row8 col3\" >0.386620</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row9_col0\" class=\"data row9 col0\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row9_col1\" class=\"data row9 col1\" >20.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row9_col2\" class=\"data row9 col2\" >0.217318</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row9_col3\" class=\"data row9 col3\" >0.198351</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row10_col0\" class=\"data row10 col0\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row10_col1\" class=\"data row10 col1\" >20.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row10_col2\" class=\"data row10 col2\" >0.055843</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row10_col3\" class=\"data row10 col3\" >0.204245</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row11_col0\" class=\"data row11 col0\" >40.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row11_col1\" class=\"data row11 col1\" >20.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row11_col2\" class=\"data row11 col2\" >0.107831</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row11_col3\" class=\"data row11 col3\" >0.454868</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row12_col0\" class=\"data row12 col0\" >1.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row12_col1\" class=\"data row12 col1\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row12_col2\" class=\"data row12 col2\" >0.869718</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row12_col3\" class=\"data row12 col3\" >1.264040</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row13_col0\" class=\"data row13 col0\" >3.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row13_col1\" class=\"data row13 col1\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row13_col2\" class=\"data row13 col2\" >0.150109</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row13_col3\" class=\"data row13 col3\" >0.523529</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row14_col0\" class=\"data row14 col0\" >5.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row14_col1\" class=\"data row14 col1\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row14_col2\" class=\"data row14 col2\" >0.565154</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row14_col3\" class=\"data row14 col3\" >0.212019</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row15_col0\" class=\"data row15 col0\" >10.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row15_col1\" class=\"data row15 col1\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row15_col2\" class=\"data row15 col2\" >0.210724</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row15_col3\" class=\"data row15 col3\" >0.205701</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row16_col0\" class=\"data row16 col0\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row16_col1\" class=\"data row16 col1\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row16_col2\" class=\"data row16 col2\" >0.189442</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row16_col3\" class=\"data row16 col3\" >0.236676</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row17_col0\" class=\"data row17 col0\" >40.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row17_col1\" class=\"data row17 col1\" >30.000000</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row17_col2\" class=\"data row17 col2\" >0.260887</td>\n",
              "                        <td id=\"T_0083e676_2adf_11eb_8a7e_0242ac1c0002row17_col3\" class=\"data row17 col3\" >1.698599</td>\n",
              "            </tr>\n",
              "    </tbody></table>"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f45a6fd66d8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xUBn1aHoUHJE"
      },
      "source": [
        "## Ejercicio 4 - Comparación con LSTM\n",
        "\n",
        "En nuestro ultimo ejercicio, vamos a comparar los resultados obtenidos hasta ahora con una LSTM, Para ellos vamos a usar una libreria llamada [Tensorflow](https://www.tensorflow.org/?hl=es-419). Esta libreria es unos de las librerias estandares para entrenar redes neuronales (hay otras librerias cada vez más populares, [PyTorch](https://pytorch.org/)). En un entorno real es preferible usar algunas de estas librerias para trabajar con redes neuronales.\n",
        "\n",
        "Nota: en el alcance del curso no vamos a ver detalles de como crear modelos con estas librerias. Estos temas corresponden a temas más avanzados de Deep Learning. En el código se usan conceptos que nos vamos a profundizar, sin embargo se invita a alimentar la curiosidad."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kXqnWgG1UHJF",
        "cellView": "form"
      },
      "source": [
        "#@title Pregunta Abierta\n",
        "#@markdown ¿por qué una red LSTM puede ser mas adecuada para resolver este problema? justifique\n",
        "respuesta_4 = \"Dado que la secuencia es demasiado larga, tiene alrededor de 11 a\\xF1os y es por meses, LSTM va a ser mas adecuada ya que tiene la capacidad de aprender, de tiempo corto, largo y asi mismo de decir cuando olvidar. Asi que seria adecuado este modelo para el problema, ya que se necesita aprender dependencias de orden superior en los datos\" #@param {type:\"string\"}"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0NeZ5PiEUHJG"
      },
      "source": [
        "Aca creamos el modelo LSTM usando tensorflow:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fns_PiMPUHJG"
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import LSTM\n",
        "def create_tf_model(look_back, num_hidden_neurons):\n",
        "    \"\"\"funcion que crear modelo LSTM con base al número de lags y numero de neuronas\"\"\"\n",
        "    model = Sequential()\n",
        "    model.add(LSTM(num_hidden_neurons, input_shape=(1, look_back)))\n",
        "    model.add(Dense(1))\n",
        "    model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "    return(model)"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Px5VQBhDUHJI"
      },
      "source": [
        "Vamos aseguranos de completar el código para lograr:\n",
        "1. Epocas = 100\n",
        "2. Pasar los parametros el la función `create_tf_model`\n",
        "3. utilizar como medida de error el error absoluto medio.  [recordar usar la implementación del modulo de metricas de sklearn](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-zgWDvfUHJI"
      },
      "source": [
        "#ejercicio de código\n",
        "import tensorflow as tf\n",
        "def experimentar_LSTM(data, look_backs, hidden_neurons):\n",
        "    \"\"\"funcion que realiza experimentos para evaluar una LSTM usando\n",
        "        MAE Error Absoluto medio\n",
        "    \n",
        "    data: pd.Dataframe, dataset a usar\n",
        "    look_back: List[int], lista con los numero de retrasos a evaluar\n",
        "    hidden_neurons: List[int], list con el numero de neuronas en la capa oculta\n",
        "    retorna: pd.Dataframe con las siguientes columnas:\n",
        "        - lags\n",
        "        - neuronas por capas\n",
        "        - error de entrenamiento\n",
        "        - error de prueba\n",
        "    \"\"\"\n",
        "    # we need to normalize the dataset before\n",
        "    #\n",
        "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "    dataset = scaler.fit_transform(data)\n",
        "    # split into train and test sets\n",
        "    train_size = int(len(dataset) * 0.7)\n",
        "    test_size = len(dataset) - train_size\n",
        "    train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\n",
        "    resultados = pd.DataFrame()\n",
        "    idx = 0\n",
        "    for num_hidden_neurons in hidden_neurons:\n",
        "        for look_back in look_backs:\n",
        "            # reshape into X=t-look_back+1:t and Y=t+1\n",
        "            trainX, trainY = create_dataset(train, look_back)\n",
        "            testX, testY = create_dataset(test, look_back)\n",
        "            # adaptar para compatibilidad con tensorflow\n",
        "            trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\n",
        "            testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\n",
        "            tf.compat.v1.disable_eager_execution() # para evitar algunos warnings\n",
        "            # llama la función definida anteriormente\n",
        "            model = create_tf_model(look_back, num_hidden_neurons)\n",
        "            # pasa el las epocas requeridas\n",
        "            model.fit(trainX, trainY, epochs=100, batch_size=1, verbose=None)\n",
        "            # Evaluar la red con los datos de test y entrenamiento \n",
        "            trainYPred = model.predict(trainX)\n",
        "            testYPred = model.predict(testX)\n",
        "            # Calculo de error\n",
        "            errorTrain = mean_absolute_error(trainY, trainYPred)\n",
        "            errorTest = mean_absolute_error(testY, testYPred)\n",
        "            resultados.loc[idx,'lags'] = look_back\n",
        "            resultados.loc[idx,'neuronas por capa'] = num_hidden_neurons \n",
        "            resultados.loc[idx,'error de entrenamiento'] = errorTrain\n",
        "            resultados.loc[idx,'error de prueba'] = errorTest\n",
        "            idx+=1\n",
        "            print(\"termina un experimento con\", errorTrain, errorTest)\n",
        "    \n",
        "    return (resultados)"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3KOxj5zIUHJK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a44b1127-38b3-4b82-cfac-aeb81d5d7eae"
      },
      "source": [
        "# ignorar los prints!\n",
        "GRADER.run_test(\"ejercicio3\", experimentar_LSTM)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_v1.py:2070: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "This property should not be used in TensorFlow 2.0, as updates are applied automatically.\n",
            "termina un experimento con 0.1639784905136295 0.3305947303662056\n",
            "termina un experimento con 0.1454812713498109 0.3727200704287421\n",
            "TEST EXITOSO!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1mt8kaTCUHJL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "72de719e-46f2-4633-cf5f-610f029b8a08"
      },
      "source": [
        "# demora algunos minutos!\n",
        "resultadosLSTM = experimentar_LSTM(dataset, look_backs = [1,3,5,20,30,40], hidden_neurons=[5,10,15])"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "termina un experimento con 0.03575034006874116 0.08185619664314939\n",
            "termina un experimento con 0.036971094701795354 0.08544109873905145\n",
            "termina un experimento con 0.03975264122269716 0.06746004636913652\n",
            "termina un experimento con 0.016094035759985508 0.047565192304362736\n",
            "termina un experimento con 0.013326875794168015 0.028481004391787187\n",
            "termina un experimento con 0.020531120798630068 0.029996948582785454\n",
            "termina un experimento con 0.03547494369909401 0.08305426277555862\n",
            "termina un experimento con 0.03829853348977843 0.07520371860749013\n",
            "termina un experimento con 0.03507917745554985 0.07686432172275369\n",
            "termina un experimento con 0.015139648381577494 0.030114622850115503\n",
            "termina un experimento con 0.012492663091057248 0.03904688813263632\n",
            "termina un experimento con 0.012566936225933542 0.060280721850376806\n",
            "termina un experimento con 0.03566846456325861 0.08347782473459822\n",
            "termina un experimento con 0.03407630469962456 0.09014758071268847\n",
            "termina un experimento con 0.03677895194809931 0.07265879662873613\n",
            "termina un experimento con 0.01478204736374562 0.022763263484826098\n",
            "termina un experimento con 0.011813498435603594 0.041385270577706315\n",
            "termina un experimento con 0.01648185700109888 0.17149774379251548\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g_md7Qc_UHJN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 416
        },
        "outputId": "0f7e5785-b2bf-4110-c669-46c659f59ae8"
      },
      "source": [
        "# para ver los resultados\n",
        "# en esta instruccion se va resaltar el mejor\n",
        "# error y tiempo de entrenamiento\n",
        "resultadosLSTM.style.highlight_min(color = 'lightgreen', axis = 0, subset = ['error de prueba'])"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style  type=\"text/css\" >\n",
              "#T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row15_col3{\n",
              "            background-color:  lightgreen;\n",
              "        }</style><table id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >lags</th>        <th class=\"col_heading level0 col1\" >neuronas por capa</th>        <th class=\"col_heading level0 col2\" >error de entrenamiento</th>        <th class=\"col_heading level0 col3\" >error de prueba</th>    </tr></thead><tbody>\n",
              "                <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row0_col1\" class=\"data row0 col1\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row0_col2\" class=\"data row0 col2\" >0.035750</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row0_col3\" class=\"data row0 col3\" >0.081856</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row1_col0\" class=\"data row1 col0\" >3.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row1_col1\" class=\"data row1 col1\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row1_col2\" class=\"data row1 col2\" >0.036971</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row1_col3\" class=\"data row1 col3\" >0.085441</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row2_col0\" class=\"data row2 col0\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row2_col1\" class=\"data row2 col1\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row2_col2\" class=\"data row2 col2\" >0.039753</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row2_col3\" class=\"data row2 col3\" >0.067460</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row3_col0\" class=\"data row3 col0\" >20.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row3_col1\" class=\"data row3 col1\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row3_col2\" class=\"data row3 col2\" >0.016094</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row3_col3\" class=\"data row3 col3\" >0.047565</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row4_col0\" class=\"data row4 col0\" >30.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row4_col1\" class=\"data row4 col1\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row4_col2\" class=\"data row4 col2\" >0.013327</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row4_col3\" class=\"data row4 col3\" >0.028481</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row5_col0\" class=\"data row5 col0\" >40.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row5_col1\" class=\"data row5 col1\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row5_col2\" class=\"data row5 col2\" >0.020531</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row5_col3\" class=\"data row5 col3\" >0.029997</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row6_col0\" class=\"data row6 col0\" >1.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row6_col1\" class=\"data row6 col1\" >10.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row6_col2\" class=\"data row6 col2\" >0.035475</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row6_col3\" class=\"data row6 col3\" >0.083054</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row7_col0\" class=\"data row7 col0\" >3.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row7_col1\" class=\"data row7 col1\" >10.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row7_col2\" class=\"data row7 col2\" >0.038299</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row7_col3\" class=\"data row7 col3\" >0.075204</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row8_col0\" class=\"data row8 col0\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row8_col1\" class=\"data row8 col1\" >10.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row8_col2\" class=\"data row8 col2\" >0.035079</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row8_col3\" class=\"data row8 col3\" >0.076864</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row9_col0\" class=\"data row9 col0\" >20.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row9_col1\" class=\"data row9 col1\" >10.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row9_col2\" class=\"data row9 col2\" >0.015140</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row9_col3\" class=\"data row9 col3\" >0.030115</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row10_col0\" class=\"data row10 col0\" >30.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row10_col1\" class=\"data row10 col1\" >10.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row10_col2\" class=\"data row10 col2\" >0.012493</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row10_col3\" class=\"data row10 col3\" >0.039047</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row11_col0\" class=\"data row11 col0\" >40.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row11_col1\" class=\"data row11 col1\" >10.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row11_col2\" class=\"data row11 col2\" >0.012567</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row11_col3\" class=\"data row11 col3\" >0.060281</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row12_col0\" class=\"data row12 col0\" >1.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row12_col1\" class=\"data row12 col1\" >15.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row12_col2\" class=\"data row12 col2\" >0.035668</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row12_col3\" class=\"data row12 col3\" >0.083478</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row13_col0\" class=\"data row13 col0\" >3.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row13_col1\" class=\"data row13 col1\" >15.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row13_col2\" class=\"data row13 col2\" >0.034076</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row13_col3\" class=\"data row13 col3\" >0.090148</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row14_col0\" class=\"data row14 col0\" >5.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row14_col1\" class=\"data row14 col1\" >15.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row14_col2\" class=\"data row14 col2\" >0.036779</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row14_col3\" class=\"data row14 col3\" >0.072659</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row15_col0\" class=\"data row15 col0\" >20.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row15_col1\" class=\"data row15 col1\" >15.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row15_col2\" class=\"data row15 col2\" >0.014782</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row15_col3\" class=\"data row15 col3\" >0.022763</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row16_col0\" class=\"data row16 col0\" >30.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row16_col1\" class=\"data row16 col1\" >15.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row16_col2\" class=\"data row16 col2\" >0.011813</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row16_col3\" class=\"data row16 col3\" >0.041385</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row17_col0\" class=\"data row17 col0\" >40.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row17_col1\" class=\"data row17 col1\" >15.000000</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row17_col2\" class=\"data row17 col2\" >0.016482</td>\n",
              "                        <td id=\"T_8b668b9a_2adf_11eb_8a7e_0242ac1c0002row17_col3\" class=\"data row17 col3\" >0.171498</td>\n",
              "            </tr>\n",
              "    </tbody></table>"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f456a237320>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RgMlGhUgUHJP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 401
        },
        "outputId": "bf7fd297-84ec-45a9-8cce-0c578c4b368e"
      },
      "source": [
        "# observa el comportamiento de los lags y comparar con elman\n",
        "import seaborn as sns\n",
        "resultadosLSTM['tipo_de_red'] = 'LSTM'\n",
        "resultadosElman['tipo_de_red'] = 'Elman'\n",
        "lstm_vs_elman = pd.concat([resultadosLSTM, resultadosElman], axis= 0 , ignore_index = True)\n",
        "sns.relplot(data= lstm_vs_elman, x= 'lags', y = 'error de prueba', kind = 'line', hue = 'tipo_de_red')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f456842d9b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 427.25x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MrKvqWw2UHJS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d2b4525-dc92-4331-9a5a-50b78bfde9fe"
      },
      "source": [
        "GRADER.check_tests()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Todo se ve ok. Asegurate de responder las preguntas abiertas y envia e archivo al formulario ¡buen trabajo!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bqLnLhkbUHJT",
        "cellView": "form"
      },
      "source": [
        "#@title Integrantes\n",
        "codigo_integrante_1 ='1017251689' #@param {type:\"string\"}\n",
        "codigo_integrante_2 = ''  #@param {type:\"string\"}"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "49ks-ybfUHJV"
      },
      "source": [
        "----\n",
        "esta linea de codigo va fallar, es de uso exclusivo de los profesores\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MJl4We7lUHJV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "62de9309-9c49-4711-fdfc-2dc359803327"
      },
      "source": [
        "GRADER.grade()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "uso del docente\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}